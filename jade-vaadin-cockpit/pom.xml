<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<parent>
	    <groupId>com.sos-berlin</groupId>
	    <artifactId>jade</artifactId>
    	<version>1.10.0-TEST-SNAPSHOT</version>
  	</parent>
  	
	<groupId>com.sos-berlin.jade</groupId>
	<artifactId>jade-vaadin-cockpit</artifactId>
	<packaging>war</packaging>
	<name>${project.artifactId}</name>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<vaadin.plugin.version>${vaadin.version}</vaadin.plugin.version>
	</properties>
	<repositories>
		<repository>
			<id>vaadin-addons</id>
			<url>http://maven.vaadin.com/vaadin-addons</url>
		</repository>
		<repository>
			<id>vaadin-snapshots</id>
			<url>http://oss.sonatype.org/content/repositories/vaadin-snapshots/</url>
			<releases>
				<enabled>false</enabled>
			</releases>
			<snapshots>
			</snapshots>
		</repository>
	</repositories>
	<pluginRepositories>
		<pluginRepository>
			<id>vaadin-snapshots</id>
			<url>http://oss.sonatype.org/content/repositories/vaadin-snapshots/</url>
			<releases>
				<enabled>false</enabled>
			</releases>
			<snapshots>
			</snapshots>
		</pluginRepository>
	</pluginRepositories>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
			</plugin>
			<!-- As we are doing "inplace" GWT compilation, ensure the widgetset -->
			<!-- directory is cleaned properly -->
			<plugin>
				<artifactId>maven-clean-plugin</artifactId>
				<configuration>
					
					<!-- <filesets>
						<fileset>
							<directory>src/main/webapp/VAADIN/widgetsets</directory>
						</fileset>
					</filesets>
					 -->
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.2</version>
				<configuration>
					<failOnMissingWebXml>false</failOnMissingWebXml>
				</configuration>
			</plugin>
			<plugin>
				<groupId>com.vaadin</groupId>
				<artifactId>vaadin-maven-plugin</artifactId>
				<version>${vaadin.plugin.version}</version>
				<configuration>
					<extraJvmArgs>-Xmx512M -Xss1024k</extraJvmArgs>
					<!-- <runTarget>mobilemail</runTarget> -->
					<!-- We are doing "inplace" but into subdir VAADIN/widgetsets. This 
						way compatible with Vaadin eclipse plugin. -->
<!--  				Not needed, we donÂ´t want any widgetset compile, using the DefaultWidgetSet from
					vaadin.client.compiled -> com.vaadin.DefaultWidgetSet [SP]
					-->
					<webappDirectory>${basedir}/src/main/webapp/VAADIN/widgetsets</webappDirectory>
					<hostedWebapp>${basedir}/src/main/webapp/VAADIN/widgetsets</hostedWebapp>
					
					<!-- Most Vaadin apps don't need this stuff, guide that to target -->
					<persistentunitcachedir>${project.build.directory}</persistentunitcachedir>
					<deploy>${project.build.directory}/gwt-deploy</deploy>
					<!-- Compile report is not typically needed either, saves hundreds of mb disk -->
					<compileReport>false</compileReport>
					<noServer>false</noServer>
					<!-- Remove draftCompile when project is ready -->
					<draftCompile>false</draftCompile>
					<style>OBF</style>
					<strict>true</strict>
				</configuration>
				<executions>
					<execution>
					<!-- "clean" leert src/main/webapp/VAADIN/widgetsets/, compile kompiliert das custom widgetset -->
						<goals>
							<!-- <goal>clean</goal> -->
							<goal>resources</goal>
							<!-- <goal>compile</goal> -->
							<goal>update-theme</goal>
							<goal>compile-theme</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- needed for compiling the css styles in production mode -->
<!-- 
			<plugin>
			    <groupId>org.codehaus.mojo</groupId>
			    <artifactId>exec-maven-plugin</artifactId>
			    <version>1.2.1</version>
			    <executions>
			        <execution>
			            <phase>generate-sources</phase>
			            <goals>
			                <goal>java</goal>
			            </goals>
			            <configuration>
			                <classpathScope>compile</classpathScope>
			                <mainClass>com.vaadin.sass.SassCompiler</mainClass>
			                <arguments>
			                    <argument>src/main/webapp/VAADIN/themes/jadevaadincockpit/jadevaadincockpit.scss</argument>
			                    <argument>src/main/webapp/VAADIN/themes/jadevaadincockpit/styles.scss</argument>
			                    <argument>src/main/webapp/VAADIN/themes/jadevaadincockpit/styles.css</argument>
			                </arguments>
			            </configuration>
			        </execution>
			    </executions>
			</plugin>
-->
			<plugin>
				<groupId>org.mortbay.jetty</groupId>
				<artifactId>jetty-maven-plugin</artifactId>
                <version>8.1.15.v20140411</version>
			</plugin>
		</plugins>
		<pluginManagement>
			<plugins>
				<!--This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself.-->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>com.vaadin</groupId>
										<artifactId>vaadin-maven-plugin</artifactId>
										<versionRange>[7.1.5,)</versionRange>
										<goals>
											<goal>resources</goal>
 											<goal>compile</goal>
											<goal>update-theme</goal>
											<goal>compile-theme</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore />
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.apache.maven.plugins
										</groupId>
										<artifactId>
											maven-dependency-plugin
										</artifactId>
										<versionRange>
											[2.7,)
										</versionRange>
										<goals>
											<goal>unpack</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore />
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

		<!-- All dependencies on vaadin are set to be provided at runtime.
		     In order to keep the war files slim, all deployed Vaadin WebApps 
		     should use the runtime jars and shouldn`t deliver them in the war file. -->
	<dependencies>
		<dependency>
			<groupId>com.vaadin</groupId>
			<artifactId>vaadin-server</artifactId>
		</dependency>
		<dependency>
			<groupId>com.vaadin</groupId>
			<artifactId>vaadin-client-compiled</artifactId>
		</dependency>
		<!--
		  Needed when using the widgetset optimizer (custom ConnectorBundleLoaderFactory).
		  
		  For widgetset compilation, vaadin-client-compiler is automatically added on the
		  compilation classpath by vaadin-maven-plugin so normally there is no need for an
		  explicit dependency.
		-->
		<!--
		<dependency>
			<groupId>com.vaadin</groupId>
			<artifactId>vaadin-client-compiler</artifactId>
			<scope>provided</scope>
		</dependency>
		-->
		<dependency>
			<groupId>com.vaadin</groupId>
			<artifactId>vaadin-client</artifactId>
		</dependency>
		<dependency>
			<groupId>com.vaadin</groupId>
			<artifactId>vaadin-push</artifactId>
		</dependency>
		<dependency>
			<groupId>com.vaadin</groupId>
			<artifactId>vaadin-themes</artifactId>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<scope>provided</scope>
		</dependency>
		
		<!-- scope provided exludes the dependency from the war build,
		     unfortunately the cascading dependencies will still be build 
		     into the war file. Therefore exclusions have to be configured -->

		<dependency>
			<groupId>com.sos-berlin.jobscheduler</groupId>
    		<artifactId>jobscheduler-helper</artifactId>
    		<version>${project.version}</version>
    	</dependency>
    	<dependency>
			<groupId>com.sos-berlin.jobscheduler</groupId>
    		<artifactId>virtual-file-system</artifactId>
    		<version>${project.version}</version>
    	</dependency>
		<dependency>
			<groupId>com.sos-berlin.jobscheduler</groupId>
    		<artifactId>sos-mail</artifactId>
    		<version>${project.version}</version>
    	</dependency>
		<dependency>
   			<groupId>com.sos-berlin.jade</groupId>
    		<artifactId>jade-engine</artifactId>
    		<version>${project.version}</version>
    	</dependency>

		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jul-to-slf4j</artifactId>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
		</dependency>
		
		<dependency>
			<groupId>org.vaadin.addons</groupId>
			<artifactId>contextmenu</artifactId>
			<version>4.4.0</version>
		</dependency>
		
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <scope>test</scope>
    </dependency>

	</dependencies>
</project>
