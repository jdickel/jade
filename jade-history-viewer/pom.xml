<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>com.sos-berlin</groupId>
		<artifactId>jade</artifactId>
    	<version>1.9.12-SNAPSHOT</version>
	</parent>
	<groupId>com.sos-berlin.jade</groupId>
	<artifactId>jade-history-viewer</artifactId>
	<name>${project.artifactId}</name>
	<packaging>war</packaging>

	<!-- Build as 'skinny war', means all needed dependencies should not be 
		build into WEB-INF/lib in the war file, instead should be provided in lib 
		of the jobscheduler installation path standard war build ~64 MiB, 'skinny 
		war build ~420KiB (with vaadin-server-xxx.jar) ~3.067KiB -->
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<vaadin.plugin.version>${vaadin.version}</vaadin.plugin.version>
	</properties>
	<repositories>
		<repository>
			<id>vaadin-snapshots</id>
			<url>http://oss.sonatype.org/content/repositories/vaadin-snapshots/</url>
			<releases>
				<enabled>false</enabled>
			</releases>
			<snapshots>
			</snapshots>
		</repository>
	</repositories>
	<pluginRepositories>
		<pluginRepository>
			<id>vaadin-snapshots</id>
			<url>http://oss.sonatype.org/content/repositories/vaadin-snapshots/</url>
			<releases>
				<enabled>false</enabled>
			</releases>
			<snapshots>
			</snapshots>
		</pluginRepository>
	</pluginRepositories>
	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
			</plugin>
			<!-- As we are doing "inplace" GWT compilation, ensure the widgetset -->
			<!-- directory is cleaned properly -->
			<plugin>
				<artifactId>maven-clean-plugin</artifactId>
				<configuration>
					<filesets>
						<fileset>
							<directory>src/main/webapp/VAADIN/widgetsets</directory>
						</fileset>
					</filesets>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.2</version>
				<configuration>
					<!-- some cascaded dependencies still get into war file, configure <packagingExcludes/> 
						to remove them after compile -->
					<packagingExcludes>
						<!-- the regex will remove all dependencies except for vaadin-server-<version>.jar, 
							because it is needed for the servlets class loader to function correctly. 
							Otherwise classes from WEB-INF/classes won´t be found -->
						<!-- %regex[WEB-INF/lib/(?!vaadin-server).*.jar], WEB-INF/classes/hibernate.cfg.xml -->
					</packagingExcludes>
					<failOnMissingWebXml>false</failOnMissingWebXml>
				</configuration>
			</plugin>
			<plugin>
				<groupId>com.vaadin</groupId>
				<artifactId>vaadin-maven-plugin</artifactId>
				<version>${vaadin.plugin.version}</version>
				<configuration>
					<extraJvmArgs>-Xmx512M -Xss1024k</extraJvmArgs>
					<!-- <runTarget>mobilemail</runTarget> -->
					<!-- We are doing "inplace" but into subdir VAADIN/widgetsets. This 
						way compatible with Vaadin eclipse plugin. -->
					<!-- Not needed, we don´t want any widgetset compile, using the DefaultWidgetSet 
						from vaadin.client.compiled -> com.vaadin.DefaultWidgetSet [SP] <webappDirectory>${basedir}/src/main/webapp/VAADIN/widgetsets</webappDirectory> 
						<hostedWebapp>${basedir}/src/main/webapp/VAADIN/widgetsets</hostedWebapp> -->
					<!-- Most Vaadin apps don't need this stuff, guide that to target -->
					<persistentunitcachedir>${project.build.directory}</persistentunitcachedir>
					<deploy>${project.build.directory}/gwt-deploy</deploy>
					<!-- Compile report is not typically needed either, saves hundreds of 
						mb disk -->
					<compileReport>false</compileReport>
					<noServer>false</noServer>
					<!-- Remove draftCompile when project is ready -->
					<draftCompile>false</draftCompile>
					<style>OBF</style>
					<strict>true</strict>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>clean</goal>
							<goal>resources</goal>
							<goal>compile</goal>
							<goal>update-theme</goal>
							<goal>compile-theme</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- needed for compiling the css styles in production mode -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>1.2.1</version>
				<executions>
					<execution>
						<phase>generate-sources</phase>
						<goals>
							<goal>java</goal>
						</goals>
						<configuration>
							<classpathScope>compile</classpathScope>
							<mainClass>com.vaadin.sass.SassCompiler</mainClass>
							<arguments>
								<argument>src/main/webapp/VAADIN/themes/bs/bs.scss</argument>
								<argument>src/main/webapp/VAADIN/themes/bs/styles.scss</argument>
								<argument>src/main/webapp/VAADIN/themes/bs/styles.css</argument>
							</arguments>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.mortbay.jetty</groupId>
				<artifactId>jetty-maven-plugin</artifactId>
				<version>8.1.15.v20140411</version>
			</plugin>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>license-maven-plugin</artifactId>
                <version>1.7</version>
                <executions>
                    <execution>
                        <id>generate-3rdParty-licenses</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>add-third-party</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/${project.artifactId}-${project.version}/META-INF</outputDirectory>
                            <thirdPartyFilename>ThirdParty.txt</thirdPartyFilename>
                            <sortArtifactByName>true</sortArtifactByName>
                            <excludedGroups>com\.sos(-berlin)?</excludedGroups>
                            <excludedArtifacts>(activemq-all|servlet-api|javax.servlet|hostware|itext|poi|stresstest|xml-im-exporter)</excludedArtifacts>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

		</plugins>
		<pluginManagement>
			<plugins>
				<!--This plugin's configuration is used to store Eclipse m2e settings 
					only. It has no influence on the Maven build itself. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>com.vaadin</groupId>
										<artifactId>vaadin-maven-plugin</artifactId>
										<versionRange>[7.1.5,)</versionRange>
										<goals>
											<goal>resources</goal>
											<goal>compile</goal>
											<goal>update-theme</goal>
											<goal>compile-theme</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore />
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.apache.maven.plugins
										</groupId>
										<artifactId>
											maven-dependency-plugin
										</artifactId>
										<versionRange>
											[2.8,)
										</versionRange>
										<goals>
											<goal>unpack</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore />
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.codehaus.mojo
										</groupId>
										<artifactId>
											license-maven-plugin
										</artifactId>
										<versionRange>
											[1.7,)
										</versionRange>
										<goals>
											<goal>add-third-party</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.codehaus.mojo
										</groupId>
										<artifactId>
											exec-maven-plugin
										</artifactId>
										<versionRange>
											[1.2.1,)
										</versionRange>
										<goals>
											<goal>java</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

	<!-- All dependencies on vaadin are set to be provided at runtime. In order 
		to keep the war files slim, all deployed Vaadin WebApps should use the runtime 
		jars and shouldn`t deliver them in the war file except for the vaadin-server 
		dependency, because this had to start the servlet in the correct ClassLoader. -->
	<dependencies>
		<!-- vaadin -->
		<dependency>
			<groupId>com.vaadin</groupId>
			<artifactId>vaadin-server</artifactId>
		</dependency>
		<dependency>
			<groupId>com.vaadin</groupId>
			<artifactId>vaadin-client-compiled</artifactId>
		</dependency>
		<!-- Needed when using the widgetset optimizer (custom ConnectorBundleLoaderFactory). 
			For widgetset compilation, vaadin-client-compiler is automatically added 
			on the compilation classpath by vaadin-maven-plugin so normally there is 
			no need for an explicit dependency. -->
		<!-- dependency> 
			<groupId>com.vaadin</groupId> 
			<artifactId>vaadin-client-compiler</artifactId> 
			<scope>provided</scope> 
		</dependency-->
		<dependency>
			<groupId>com.vaadin</groupId>
			<artifactId>vaadin-client</artifactId>
			<!--scope>provided</scope -->
		</dependency>
		<dependency>
			<groupId>com.vaadin</groupId>
			<artifactId>vaadin-push</artifactId>
			<!--scope>provided</scope -->
		</dependency>
		<dependency>
			<groupId>com.vaadin</groupId>
			<artifactId>vaadin-themes</artifactId>
			<!--scope>provided</scope -->
		</dependency>

		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>com.sos-berlin.jobscheduler</groupId>
			<artifactId>ftp-history</artifactId>
			<version>${project.version}</version>
		</dependency>

		<dependency>
			<groupId>com.sos-berlin.jobscheduler</groupId>
			<artifactId>sos-security</artifactId>
			<version>${project.version}</version>
		</dependency>

		<dependency>
			<groupId>com.sos-berlin.jobscheduler</groupId>
			<artifactId>hibernate-commons</artifactId>
			<version>${project.version}</version>
			<exclusions>
				<exclusion>
					<groupId>org.postgresql</groupId>
					<artifactId>postgresql</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>jcifs</groupId>
			<artifactId>jcifs</artifactId>
			<exclusions>
				<exclusion>
		            <groupId>javax.servlet</groupId>
		            <artifactId>servlet-api</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- db drivers -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<scope>provided</scope>
		</dependency>

        <dependency>
            <groupId>postgresql</groupId>
            <artifactId>postgresql</artifactId>
        </dependency>

		<dependency>
			<groupId>org.mariadb.jdbc</groupId>
			<artifactId>mariadb-java-client</artifactId>
		</dependency>

		<dependency>
			<groupId>com.oracle</groupId>
			<artifactId>ojdbc6</artifactId>
		</dependency>

        <dependency>
            <groupId>net.sourceforge.jtds</groupId>
            <artifactId>jtds</artifactId>
        </dependency>

		<!-- logging -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jul-to-slf4j</artifactId>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
		</dependency>

		<!-- testing -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>

	</dependencies>
</project>
