package com.sos.jade.db;

import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.List;

import org.hibernate.Query;

/** \class JadeTransferDetailDBLayer
 * 
 * \brief JadeTransferDetailDBLayer -
 * 
 * \details
 *
 * \section JadeTransferDetailDBLayer.java_intro_sec Introduction
 * 
 * \section JadeTransferDetailDBLayer.java_samples Some Samples
 *
 * \code .... code goes here ... \endcode
 *
 * <p style="text-align:center">
 * <br />
 * --------------------------------------------------------------------------- <br />
 * APL/Software GmbH - Berlin <br />
 * ##### generated by ClaviusXPress (http://www.sos-berlin.com) ######### <br />
 * ---------------------------------------------------------------------------
 * </p>
 * \author Uwe Risse \version 13.09.2011 \see reference
 *
 * Created on 13.09.2011 14:40:18 */

public class JadeTransferDetailDBLayer extends JadeTransferDBLayer {

    @SuppressWarnings("unused")
    private final String conClassName = "JadeTransferDetailDBLayer";

    public JadeTransferDetailDBLayer(final File configurationFile) {
        super(configurationFile);
        this.setConfigurationFile(configurationFile);
    }

    public List<JadeTransferDetailDBItem> getTransferDetailsFromTo() throws ParseException {
        SimpleDateFormat formatter = new SimpleDateFormat("dd.MM.yyyy hh:mm");
        beginTransaction();

        Query query = session.createQuery("  from JadeTransferDetailDBItem where  created >= :createdFrom and created <= :createdTo");

        query.setTimestamp("createdFrom", createdFrom);
        query.setTimestamp("createdTo", createdTo);

        List<JadeTransferDetailDBItem> resultset = query.list();

        commit();
        return resultset;

    }

    public List<JadeTransferDetailDBItem> getTransferListDetail(final int limit) throws Exception {
        beginTransaction();

        Query query = session.createQuery("from JadeTransferDetailDBItem " + getWhere());

        if (whereStartTime != null && !whereStartTime.equals("")) {
            query.setDate("startTime", whereStartTime);
        }
        if (whereEndTime != null && !whereEndTime.equals("")) {
            query.setDate("endTime", whereEndTime);
        }

        query.setMaxResults(limit);

        List<JadeTransferDetailDBItem> transferDetailsList = query.list();
        commit();

        return transferDetailsList;
    }

    @Override
    public int deleteFromTo() {
        int row = deleteFromTo("JadeTransferDetailDBItem");
        return row;
    }

}
